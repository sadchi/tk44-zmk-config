/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define NUM 1
#define NAV 2
#define AUX 3


&sk {
    release-after-ms = <5000>;
    quick-release;
    /delete-property/ ignore-modifiers;
};

#define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <50>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
  };

/ {
    combos {
        compatible = "zmk,combos";
        COMBO(1, &kp ESC,5 6)
        COMBO(2, &kp RET,18 19)
        COMBO(3, &kp TAB,30 31)
        COMBO(4, &to AUX,29 30)
        
        COMBO(5,&sk LS(LC),20 21)
        COMBO(6,&sk LC(LALT),21 33)
        COMBO(7,&sk LS(LALT),20 33)
        COMBO(8,&sk LC(LS(LALT)),32 33)
    };
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {

                        bindings = <
&kp LWIN &kp ESC   &kp Q           &kp W    &kp E         &kp R         &kp T            &kp Y     &kp U    &kp I     &kp O    &kp P       &kp BSPC &kp RWIN
         &kp TAB   &kp A           &kp S    &kp D         &kp F         &kp G            &kp H     &kp J    &kp K     &kp L    &kp SEMI    &kp DEL  
         &kp LCTRL &kp Z           &kp X    &kp C         &kp V         &kp B            &kp N     &kp M    &kp COMMA &kp DOT  &kp SLASH   &kp RET  
         &mo NUM   &kp SPACE       &mo NAV    &kp RALT      &kp BSPC      &kp RSFT         
                        >;
                };
                num_layer {

                        bindings = <
&kp LWIN &kp ESC   &kp KP_DIVIDE   &kp N7   &kp N8        &kp N9        &kp MINUS        &kp EXCL  &kp AT   &kp HASH  &kp DLLR &kp PRCNT   &kp BSPC &kp RWIN
         &kp TAB   &kp KP_MULTIPLY &kp N4   &kp N5        &kp N6        &kp EQUAL        &kp CARET &kp AMPS &kp STAR  &kp LPAR &kp RPAR    &kp DEL  
         &kp LCTRL &kp N0          &kp N1   &kp N2        &kp N3        &kp DOT          &kp GRAVE &kp SQT  &kp LBKT  &kp RBKT &kp BSLH    &kp RET  
         &trans    &trans          &trans   &kp RC(MINUS) &kp RC(EQUAL) &kp RSFT 
                        >;
                };

                nav_layer {

                        bindings = <
&kp LWIN &kp ESC   &kp PG_UP       &kp HOME &kp UP        &kp END       &kp ESC          &kp F1    &kp F2   &kp F3    &kp F4   &bootloader &kp BSPC &kp RWIN
         &kp TAB   &kp PG_DN       &kp LEFT &kp DOWN      &kp RIGHT     &kp RET          &kp F5    &kp F6   &kp F7    &kp F8   &trans      &kp DEL  
         &kp LCTRL &sk LWIN        &sk LALT &sk LCTL      &sk LSFT      &kp TAB          &kp F9    &kp F10  &kp F11   &kp F12  &trans      &kp RET  
         &trans    &trans          &trans   &sk LC(LS(LALT))         &trans        &trans   
                        >;
                };

                aux_layer {

                        bindings = <
&kp LWIN &kp ESC   &trans          &trans   &kp LBKT         &kp RBKT      &trans     &trans    &trans   &trans    &trans   &trans      &kp BSPC &kp RWIN
         &kp TAB   &trans          &trans   &kp RC(MINUS)    &kp RC(EQUAL) &trans     &trans    &trans   &trans    &trans   &trans      &kp DEL  
         &kp LCTRL &trans          &trans   &trans           &trans        &trans     &trans    &trans   &trans    &trans   &trans      &kp RET  
         &kp RALT    &kp SPACE       &to DEF  &to DEF          &trans        &to DEF  
                        >;
                };

        };
};
